<?phpApp::uses('AppController', 'Controller');/** * Companies Controller * */class CrmCompaniesController extends AppController {    public $helpers = array('Html', 'Form', 'Session');    public $components = array('Session', 'Auth', 'Paginator');//    var $components = array('Auth');    /**     * Scaffold     *     * @var mixed     */    public $scaffold;    function beforeFilter() {        if ($this->Session->check('Auth.User.id') != 1) {            $this->redirect('/');        }        //if(!$this->Acl->check('User::'.$user['User']['id'], 'Company', 'update')) die('you are not authorized');        //if(!$this->Access->check('Company', 'update')) die('you are not authorized');    }    public function index() {        if ($this->Session->read('Auth.User.role') != "admin" && $this->Session->read('Auth.User.role') == "company") {            $this->Session->setFlash("You are not authorised to view this page.");            $this->redirect('/employees');        }        $this->layout = "admin";        $this->set('companies', $this->Paginator->paginate());    }    public function view($id) {        $this->layout = "admin";        if (!$id) {            throw new NotFoundException(__('Invalid company'));        }        $company = $this->CrmCompany->find('first', array('conditons' => array('CrmCompany.id=>$id')));        if (!$company) {            throw new NotFoundException(__('Invalid company'));        }        $this->set('company', $company);    }    public function add() {        if ($this->Session->read('Auth.User.role') != "admin") {            $this->Session->setFlash("You are not authorised to add a Company");            $this->redirect('/');        }        $this->layout = "admin";                if ($this->data) {            $companyName = $this->request->data['CrmCompany']['Company_Name'];            $companyName = strtolower($companyName);            $checkCompanyName = array();            $checkCompanyName = $this->CrmCompany->find('first', array('fields' => 'CrmCompany.Company_Name', 'conditions' => array('CrmCompany.Company_Name' => $companyName)));            if (!empty($checkCompanyName)) {                $checkCompanyName = strtolower($checkCompanyName['CrmCompany']['Company_Name']);                if ($companyName == $checkCompanyName) {                    $this->Session->setFlash(__('Company with same name already exists'));                    return $this->redirect(array('action' => 'index'));                }            }            $user = $this->Auth->user();                        if($this->request->data['User']['password'] == $this->request->data['User']['confirm_password']) {                $this->loadmodel('User');                $user['User']['email'] = $this->request->data['User']['email'];                                $user['User']['username'] = $this->request->data['User']['user_name'];                $user['User']['password'] = Security::hash($this->request->data['User']['password'], 'sha1', true);                $user['User']['crm_company_id'] = $user['crm_company_id'];                $user['User']['role'] = 'company';                $user['User']['user_company_code'] = 'asdfgh';                $this->User->save($user);            } else {                $this->Session->setFlash(__('Pasword Mismatch'));                                return $this->redirect(array('action'=>'add'));            }            $userid = $this->User->getLastInsertID();            $companyData['CrmCompany'] = $this->request->data['CrmCompany'];            $companyData['CrmCompany']['User_ID'] = $userid;                        $this->CrmCompany->create();            if ($this->CrmCompany->save($companyData)) {                $companyID = $this->CrmCompany->getLastInsertID();                $user_id = $this->User->find('first', array('fields' => 'User.user_id', 'conditions' => array('User.id' => $userid)));                $empcode = "'" . $companyName . '-' . $companyID . '-' . $user_id['User']['user_id'] . "'";                $this->User->updateAll(                        array('User.crm_company_id' => $companyID, 'User.user_company_code' => $empcode), array('User.id' => $userid)                );                //$userData['User']['company_id'] = $companyID;                //$this->User->save($userData);                $this->Session->setFlash(__('Your company has been saved.'));                return $this->redirect(array('action' => 'index'));            }            $this->Session->setFlash(__('Unable to add company.'));        }    }    public function edit($id = null) {        if ($this->Session->read('Auth.User.role') != "admin" && $this->Session->read('Auth.User.role') == "company") {            $this->Session->setFlash("You are not authorised to add a Company");            $this->redirect('/employees');        }        $this->layout = "admin";                if (!$id) {            throw new NotFoundException(__('Invalid company'));        }                $company = $this->CrmCompany->find('first', array('conditions' => array('CrmCompany.id' => $id)));        $this->loadModel('User');        $user = $this->User->find('first', array('conditions' => array('User.crm_company_id' => $id, 'User.role' => 'company')));        if (!$company) {            throw new NotFoundException(__('Invalid company'));        }        if ($this->request->is(array('company', 'put'))) {            $this->CrmCompany->id = $id;                        if (array_key_exists('ChangePassword', $this->request->data['CrmCompany'])) {                if ($user['User']['password'] == $this->Auth->password($this->request->data['User']['old_password'])) {                    if ($this->request->data['User']['new_password'] == $this->request->data['User']['confirm_password'] && $this->request->data['User']['new_password'] != '') {                        $newpass = "'".Security::hash($this->request->data['User']['new_password'], 'sha1', true)."'";                        $this->User->updateAll(                                array('password'=> $newpass),                                array('id'=>$user['User']['id'])                        );                    } else {                        $this->Session->setFlash(__("New paswword is different from confirm password or you didn't entered any password."));                        return $this->redirect(array('action' => 'edit/' . $user['User']['crm_company_id']));                    }                } else {                    $this->Session->setFlash(__("Old password doesn't match."));                    return $this->redirect(array('action' => 'edit/' . $user['User']['crm_company_id']));                }            }            if ($this->CrmCompany->save($this->request->data)) {                $this->Session->setFlash(__('Your company has been updated.'));                return $this->redirect(array('action' => 'index'));            }            $this->Session->setFlash(__('Unable to update your company.'));        }        if (!$this->request->data) {            $this->request->data['CrmCompany'] = $company['CrmCompany'];            $this->request->data['User'] = $user['User'];        }    }    public function delete($id) {        if ($this->Session->read('Auth.User.role') != "admin") {            $this->Session->setFlash("You are not authorised to delete a Company");            $this->redirect('/');        }        if ($this->request->is('get')) {            throw new MethodNotAllowedException();        }        if ($this->CrmCompany->delete($id,true)) {            $this->Session->setFlash(                    __('The company with id: %s has been deleted.', h($id))            );            return $this->redirect(array('action' => 'index'));        }    }    public function change_email() {        $this->autoRender = false;        $this->loadmodel('User');        $user['User']['email'] = $this->request->data['User']['email'];        $user['User']['id'] = $this->request->data['User']['id'];        $user['User']['crm_company_id'] = $this->request->data['User']['crm_company_id'];        $this->User->save($user);        $this->Session->setFlash('Your Email has been changed.');        $cID = $this->request->data['User']['crm_company_id'];        $this->redirect("edit/$cID");    }    public function change_password($id=NULL) {        $this->autoRender = false;        echo $id;die;        $this->loadModel('User');        $userdata = array();        $userdata = $this->User->find('first', array('conditions' => array('User.id' => $id, 'User.password' => Security::hash($this->request->data['User']['old_password'], 'sha1', TRUE))));        echo $this->request->data['id'];die;                if($userdata) {            if (!empty($this->request->data)) {                $user['User']['password'] = Security::hash($this->request->data['User']['old_password'], 'sha1', true);                $user['User']['id'] = $this->request->data['User']['id'];                $user['User']['crm_company_id'] = $this->request->data['User']['crm_company_id'];                pr($user);                die;                if ($this->User->save($user)) {                    $this->Session->setFlash('Your Password has been changed.');                } else {                    $this->Session->setFlash('Your Password can not be changed.Please try again');                }                $cID = $this->request->data['User']['crm_company_id'];                $this->redirect("edit/$cID");            }        } else{            $this->Session->setFlash('Your old Password does not match.');            $this->redirect("edit/$cID");         }    }}